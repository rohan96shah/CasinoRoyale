SPATH=`echo $PATH | tr ' ' '\177' | tr ':' ' '`

pathcheck ()
{
    for i in $SPATH
    do
        PATHCHECK_FOUND="`echo $i | tr '\177' ' '`/$1"
        test -f "$PATHCHECK_FOUND" && return 0
    done
    PATHCHECK_FOUND=
    return 1
}

convert_windows_path ()
{
    case `uname` in
        CYGWIN_NT*)
            if [ ! -d "$1" ]
            then
                echo "ERROR: Path $1 does not exist"
                return 1
            fi
            #Make it a dos path to remove all spaces
            DOS_CONV_PATH=`cygpath -d "$1"`
            if [ $? != 0 ]
            then
                echo "ERROR: Could not convert to dos path $1"
                return 1
            fi
            #Now turn into a unix path for useage
            UNIX_CONV_PATH=`cygpath -u $DOS_CONV_PATH 2>/dev/null`
            if [ $? != 0 ]
            then
                echo "ERROR: Could not convert to unix path $1"
                return 1
            fi
            ;;
        *)
            UNIX_CONV_PATH="$1"
            DOS_CONV_PATH="$1"
            ;;
    esac
    return 0
}

csharp_check ()
{
    REQUIRED_VERSION="v2.0.50727"
    echo -n "C#: "
    pathcheck csc.exe

    CSC_NOT_FOUND=$?

    if [ $CSC_NOT_FOUND == 0 ]
    then
        CSC_EXE=`which csc`
        if [ "$CSC_EXE" = "/usr/bin/csc" -o  "$CSC_EXE" = "/bin/csc" ]
        then
            CSC_NOT_FOUND=1
        fi
    fi

    MAIN_DRIVE=`echo $SYSTEMDRIVE | awk -F ':' '{ print $1 }'`
    if [ $CSC_NOT_FOUND != 0 ]
    then
        if [ ! -d "/cygdrive/$MAIN_DRIVE/Windows/Microsoft.NET/Framework" ]
        then
            echo "Error - no valid Microsoft.NET Framwork. Please *PREFIX* its location to your PATH"
            return 1
        fi
        VERSIONS=`ls /cygdrive/$MAIN_DRIVE/Windows/Microsoft.NET/Framework | grep -E ^v`
        for i in $VERSIONS
        do
            NET_VERSION=`echo $i | tr -d '/'`
            echo "$REQUIRED_VERSION $NET_VERSION" | \
            awk ' \
            FS="" ;\
            { \
                vera1 = gensub( "^v([0-9]*).(.*)$", "\\1", 1 ) ; \
                vera2 = gensub( "^v([0-9]*).([0-9]*)(.*)$", "\\2", 1 ) ;\
                vera3 = gensub( "^v([0-9]*).([0-9]*).?([0-9]*)(.*)$", "\\3", 1 ) ;\
                verb1 = gensub( ".* v([0-9]*).([0-9]*).?([0-9]*)$", "\\1", 1 ) ; \
                verb2 = gensub( ".* v([0-9]*).([0-9]*).?([0-9]*)$", "\\2", 1 ) ;\
                verb3 = gensub( ".* v([0-9]*).([0-9]*).?([0-9]*)$", "\\3", 1 ) ;\
                if ( ( int(vera1) > int(verb1) ) \
                  || ( ( int(vera1) == int(verb1) ) && ( int(vera2) >  int(verb2) ) ) \
                  || ( ( int(vera1) == int(verb1) ) && ( int(vera2) == int(verb2) ) \
                  && (int(vera3) > int(verb3) ) ) ) \
                { \
                    exit 0 ; \
                } \
                else \
                { \
                    exit 1 ; \
                } \
            }'
            if [ "$?" = "1" ]
            then
                if [ ! -f "/cygdrive/$MAIN_DRIVE/Windows/Microsoft.NET/Framework/$i/csc.exe" ]
                then
                    continue
                fi
                FOUND_VERSION=$i
                PATH="/cygdrive/$MAIN_DRIVE/Windows/Microsoft.NET/Framework/$i:$PATH"
                break
            fi
        done
        if [ ! -f "/cygdrive/$MAIN_DRIVE/Windows/Microsoft.NET/Framework/$i/csc.exe" ]
        then
            echo "Error - no valid Microsoft.NET Framwork compiler found. Please *PREFIX* its location to your PATH"
            return 1
        fi
    fi

    pathcheck al.exe
    AL_NOT_FOUND=$?
    if [ $AL_NOT_FOUND != 0 ]
    then
        if [ ! -f "/cygdrive/$MAIN_DRIVE/Windows/Microsoft.NET/Framework/$FOUND_VERSION/al.exe" ]
        then
            if [ ! -f "/cygdrive/$MAIN_DRIVE/Windows/Microsoft.NET/Framework/v2.0.50727/al.exe" ]
            then
                if [ ! -f "/cygdrive/$MAIN_DRIVE/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/bin/x64/al.exe" ]
                then
                   if [ ! -f "/cygdrive/$MAIN_DRIVE/Program Files/Microsoft SDKs/Windows/v7.0A/bin/al.exe" ]
                   then
                      if [ ! -f "/cygdrive/$MAIN_DRIVE/Program Files/Microsoft SDKs/Windows/v6.0A/bin/al.exe" ]
                      then
                         if [ ! -f "/cygdrive/$MAIN_DRIVE/Program Files/Microsoft SDKs/Windows/v5.0A/bin/al.exe" ]
                         then
                             echo "Error - no Assembly Linker found (al.exe). Please *PREFIX* its location to your PATH"
                             return 1
                         else
                             PATH="$PATH:/cygdrive/$MAIN_DRIVE/Program Files/Microsoft SDKs/Windows/v5.0A/bin/"
                         fi
                      else
                         PATH="$PATH:/cygdrive/$MAIN_DRIVE/Program Files/Microsoft SDKs/Windows/v6.0A/bin/"
                      fi
                   else
                        PATH="$PATH:/cygdrive/$MAIN_DRIVE/Program Files/Microsoft SDKs/Windows/v7.0A/bin"
                   fi
                else
                     PATH="$PATH:/cygdrive/$MAIN_DRIVE/Program Files (x86)/Microsoft SDKs/Windows/v7.0A/bin/x64"
                fi
            else
                PATH="$PATH:/cygdrive/$MAIN_DRIVE/Windows/Microsoft.NET/Framework/v2.0.50727/"
            fi
        fi
    fi

    echo "OK - using version `csc -help | grep \"Framework version\" | awk '{ print $NF }'`"
    return 0
}

# test if CL.exe is at least vs7
msvs_check ()
{
    echo -n "VS: "

    if [ -n "$VS_HOME" ]
    then
        if [ ! -d "$VS_HOME" ]
        then
            echo "ERROR - $VS_HOME is not set to a directory"
            return 1
        fi
        set_var VS_HOME "$VS_HOME"
    else
        pathcheck cl.exe
        if [ $? = 0 ]
        then
            CL_EXE=`which cl.exe`
            if [ "$?" != "0" ]
            then
                echo "ERROR - cl.exe not found"
                return 1
            fi
            VS_HOME=`dirname "$CL_EXE"`
            VS_HOME=`dirname "$VS_HOME"`
            VS_HOME=`dirname "$VS_HOME"`
            set_var VS_HOME "$VS_HOME"
        else
            echo "ERROR - No VS_HOME not set"
            return 1
        fi
    fi

    convert_windows_path "$VS_HOME"
    if [ $? != 0 ]
    then
        return 1
    fi

    PATH_ADDON=""
    SDK_PATH_ADDON=""
    case ${SPLICE_HOST} in
    x86_64.*)
        PATH_ADDON="amd64"
        SDK_PATH_ADDON="x64"
        ;;
    esac

    if [ -d "$UNIX_CONV_PATH/Vc7" ]
    then
        PATH="$UNIX_CONV_PATH/Vc7/bin/${PATH_ADDON}:$PATH"
    else
        PATH="$UNIX_CONV_PATH/VC/bin/${PATH_ADDON}:$PATH"
    fi
    PATH="$UNIX_CONV_PATH/Common7/IDE:$PATH"
    PATH="$OSPL_OUTER_HOME/testsuite/lib/$SPLICE_HOST:$PATH"
    set_var PATH "$PATH"

    COMPILER_VER=`cl -help 2>&1 | tr -d '\r' | head -1 | sed 's@\(.*Version \)\([0-9][0-9\.]*\)\(.*\)$@\2@'`
    if [ -z $COMPILER_VER ]
    then
        echo "ERROR - Compiler version cannot be determined"
        return 1
    fi
    set_var OSPL_COMPILER_VER "$COMPILER_VER"
    CL_MAJOR=`echo $COMPILER_VER | cut -f 1 -d .`
    if [ $CL_MAJOR -lt 13 ]
    then
        echo "ERROR - Only .NET 2003 and above supported"
        echo "  got cl version [$COMPILER_VER]"
        return 1
    fi

    if [ $CL_MAJOR = 13 ]
    then
        COMPILER_VER="VS .NET 2003 (Visual Studio 7)"

        LIBPATH="$DOS_CONV_PATH\Vc7\atlmfc\lib"
        LIB="$DOS_CONV_PATH\Vc7\lib;$DOS_CONV_PATH\Vc7\atlmfc\lib"
        FrameworkSDKDir="$UNIX_CONV_PATH/SDK/v1.1"
        VS_YEAR=2003
        set_var FrameworkSDKDir "$FrameworkSDKDir"
        set_var LIBPATH "$LIBPATH"
        set_var LIB "$LIB"

    fi

    if [ $CL_MAJOR = 14 ]
    then
        COMPILER_VER="VS .NET 2005 (Visual Studio 8)"
        VS_YEAR=2005
        LIBPATH="$DOS_CONV_PATH\VC\ATLMFC\LIB"
        LIB="$DOS_CONV_PATH\VC\LIB;$DOS_CONV_PATH\VC\ATLMFC\LIB"
        FrameworkSDKDir="$UNIX_CONV_PATH/SDK/v2.0"
        set_var FrameworkSDKDir "$FrameworkSDKDir"
        set_var LIBPATH "$LIBPATH"
        set_var LIB "$LIB"

    fi

    if [ "$CL_MAJOR" = "15" -o "$CL_MAJOR" = "16" -o "$CL_MAJOR" = "17" -o "$CL_MAJOR" = "18" ]
    then
        if [ "$CL_MAJOR" = "15" ]
        then
            COMPILER_VER="VS .NET 2008 (Visual Studio 9)"
            VS_YEAR=2008
            SDK_VERSION="v6.0A"
        else
            if [ "$CL_MAJOR" = "16" ]
            then
                COMPILER_VER="VS .NET 2010 (Visual Studio 10)"
                VS_YEAR=2010
                SDK_VERSION="v7.0A"
            else
                # rc.exe is in bin/x86 dir in latest 32-bit version
                case ${SPLICE_HOST} in
                    x86.*)
                        SDK_PATH_ADDON="x86"
                    ;;
                esac
                if [ "$CL_MAJOR" = "17" ]
                then
                    COMPILER_VER="VS .NET 2012 (Visual Studio 11)"
                    VS_YEAR=2012
                    SDK_VERSION="v7.0A"
                else
                    if [ "$CL_MAJOR" = "18" ]
                    then
                        COMPILER_VER="VS .NET 2013 (Visual Studio 12)"
                        VS_YEAR=2013
                        SDK_VERSION="8.1"
                    fi
                fi
            fi
        fi

        LIB="$DOS_CONV_PATH\VC\LIB\${PATH_ADDON};"
        if [ -n "$WINDOWSSDKDIR" ]
        then
            convert_windows_path "$WINDOWSSDKDIR"
            SDK_DIR="$UNIX_CONV_PATH"
        else
            if [ $CL_MAJOR -ge 18 ]
            then
               SDK_DIR="$UNIX_CONV_PATH/../Windows Kits/$SDK_VERSION"
            else
               SDK_DIR="$UNIX_CONV_PATH/../../Program Files/Microsoft SDKs/Windows/$SDK_VERSION"
            fi
            WINDOWSSDKDIR=$SDK_DIR
        fi
        convert_windows_path "$SDK_DIR"
        FrameworkSDKDir=`cygpath -u "$SDK_DIR"`
        PATH="$FrameworkSDKDir/bin/${SDK_PATH_ADDON}:$PATH"
        LIB="$DOS_CONV_PATH\LIB\${PATH_ADDON};"
        set_var FrameworkSDKDir "$FrameworkSDKDir"
        set_var LIB "$LIB"
    fi
    echo "OK - using $COMPILER_VER"

    VS_VER=$CL_MAJOR
    set_var VS_VER "$VS_VER"

    # Right now we only absolutely need devenv for
    # ISO C++
    if [ "$INCLUDE_API_DCPS_ISOCPP" != "no" ]
    then
        echo -n "Visual Studio builder: "
        which devenv.com > /dev/null 2>&1
        if [ $? != 0 ]
        then
            which VCExpress.exe > /dev/null 2>&1
            if [ $? != 0 ]
            then
               which WDExpress.exe > /dev/null 2>&1
               if [ $? != 0 ]
               then
                    printf "ERROR: devenv.com or VCExpress.exe not available on the path when Visual Studio compilation configured.\n"
                    printf "PATH is $PATH\n"
                    printf "VS_HOME is $VS_HOME\n"
                    return 1
                else
                    set_var OSPL_DEVENV WDExpress.exe
                fi
            else
                set_var OSPL_DEVENV VCExpress.exe
            fi
        else
            set_var OSPL_DEVENV devenv.com
        fi
        echo "OK - using $OSPL_DEVENV"
    fi
    return 0
}


# test if gcc is at least v3.2
gcc_check ()
{
    echo -n "GCC: "
    pathcheck gcc
    if [ $? != 0 ]
    then
        echo "ERROR - Not found"
        return 1
    fi

    GCC_FULLVERSION=`gcc -dumpversion`
    GCC_MAJOR=`echo $GCC_FULLVERSION | cut -f 1 -d .`
    if [ $GCC_MAJOR -lt 3 ]
    then
        echo "ERROR - Only gcc 3.2 and above is supported"
        return 1
    fi

    GCC_MINOR=`echo $GCC_FULLVERSION | cut -f 2 -d .`
    if [ $GCC_MAJOR -eq 3 -a $GCC_MINOR -lt 2 ]
    then
        echo "ERROR - Only gcc 3.2 and above is supported"
        return 1
    fi
    # -Werror=switch supported by gcc >= 4.2
    GCC_WERROR_IS_SWITCH_SUPPORT=`echo $GCC_FULLVERSION | gawk '{ print $1>="4.2"?"1":"0"}'`
    set_var GCC_WERROR_IS_SWITCH_SUPPORT "$GCC_WERROR_IS_SWITCH_SUPPORT"
    export GCC_WERROR_IS_SWITCH_SUPPORT
    echo "OK - using version $GCC_FULLVERSION"

    # -flto works well in gcc >= 4.7
    if echo $GCC_FULLVERSION | gawk '{ if($1>="4.7"){exit 0}else{exit 1} }' ; then
        set_var CFLAGS_LTO=-flto
        export CFLAGS_LTO
        echo "NOTE: enabling link-time optimizations in release build"
    # Also at 4.7+ we disable maybe-uninitialized errors for some 3rd party code
        set_var GCC_HAS_NO_MAYBE_UNINITIALIZED=yes
        export GCC_HAS_NO_MAYBE_UNINITIALIZED
    fi
    return 0
}

# test that we are on glibc and get its version string
glibc_check ()
{
    GLIBC_VERSION=`getconf GNU_LIBC_VERSION | cut -f 2 -d ' '`
    if test -z $GLIBC_VERSION
    then
        echo "ERROR - no or unidentifed glibc"
        return 1
    else
        echo "GLIBC: version $GLIBC_VERSION"
        return 0
    fi
}

# test if we are truing to use valgrind it is in the path
valgrind_check ()
{
    if [ "$VALGRIND" = "yes" ]
    then
        echo -n "Valgrind: "
        pathcheck valgrind
        if [ $? != 0 ]
        then
            echo "ERROR - Not found"
            return 1
        fi
        echo "OK - using version" `valgrind --version`
        if [ "$FORCE_DEBUG_SYMBOLS" != "yes" ]
        then
            echo "   - Warning debug symbols may not be compiled in"
            echo "   - set OVERRIDE_FORCE_DEBUG_SYMBOLS to yes to added"
            echo "   - compiler debug symboles"
        fi
        #source in the valgrind commands that are used
        #setup where the default logs will go
        #will be overridden when ran in the build system
        export VG_LOG_DIR=.
        . "$OSPL_HOME/bin/valgrind_cmds"
    fi
    return 0
}

# test if sun studio is at version 12
sun_cc_studio12_check ()
{
    echo -n "cc: "
    pathcheck cc
    if [ $? != 0 ]
    then
        echo "ERROR - Not found"
        return 1
    fi
    echo "OK - using version" `cc -V 2>&1 |  grep '^cc:'`
    return 0
}

check_and_set_native_dir ()
{
    if [ ! -d "${!1}" ]
    then
       echo "ERROR: Value of \$${1} : ${!1} does not exist "
       return 1
    fi
    case `uname` in
        CYGWIN_NT*)
            WINDOWS_PATH=`cygpath -w ${!1} 2>/dev/null`
            if [ $? == 0 ]
            then
                echo "OK. \$${1} was ${!1}, set to $WINDOWS_PATH"
                set_var ${1} ${WINDOWS_PATH}
            else
                echo "ERROR: Can't convert path ${!1} for \$${1} "
                return 1
            fi
            ;;
        *)
            if [ -d ${!1} ]
            then
                echo "OK. Set \$${1} to ${!1} "
                set_var ${1} ${!1}
            fi
            ;;
    esac
    return 0
}

qt_check ()
{
    echo -n "Qt: "
    if [ "$OSPL_QT_IS_ON" = "no" ]
    then
        echo "Disabled. OSPL_QT_IS_ON was: no"
        return 0
    fi
    if [ -n "$QTDIR" ]
    then
        if [ -f "$QTDIR/bin/uic" ]
        then
            QT_VERSION=`$QTDIR/bin/uic -version 2>&1 | sed 's/\([^0-9][^0-9]*\)\([0-9]\)\([^0-9].*\)/\2/'`
            if [ "$QT_VERSION" != "4" ]
            then
                echo "Error \$QTDIR points to $QTDIR. This is not version 4. Please unset or set OSPL_QT_IS_ON=no"
                return 1
            fi
        fi
        check_and_set_native_dir QTDIR
        if [ $? = 0 ]
        then
            set_var OSPL_QT_IS_ON yes
            case `uname` in
            CYGWIN_NT*)
                convert_windows_path "$QTDIR"
                PATH="$UNIX_CONV_PATH/bin:$PATH"
                set_var PATH "$PATH"
                QTLIBDIR="$UNIX_CONV_PATH/lib"
                set_var QTLIBDIR "$QTLIBDIR"
                ;;
            *)
                PATH="$QTDIR/bin:$PATH"
                set_var PATH "$PATH"
                set_var QTLIBDIR $QTDIR/lib
                ;;
            esac
        else
            return 1
        fi
    else
        if [ -z "$QTLIBDIR" ]
        then
            linkpath=`ld --verbose | grep SEARCH_DIR | tr ' '  '\n' | sed -e 's/SEARCH_DIR("\=\?\(.*\)");/\1/g'`
            for i in $linkpath
            do
                if [ -f $i/libQtCore.so ]
                then
                    set_var QTLIBDIR $i
                fi
            done
        fi
        if [ -z "$QTLIBDIR" ]
        then
            echo "Warning - Cannot find Qt libraries. Standalone demo package will not be built."
            echo "   Please specifiy QTLIBDIR."
            set_var OSPL_QT_IS_ON no
	        return 0
        fi
        case `uname` in
        CYGWIN_NT*)
            # Protect against 'cygwin' Qt. It can include uic-qt4.
            ;;
        *)
            pathcheck uic-qt4
            if [ $? = 0 ]
            then
                echo "On. Using QT tools from the path (with -qt4 suffix)."
                set_var QT4_TOOL_SUFFIX \-qt4
                set_var OSPL_QT_IS_ON yes
                return 0
            fi
            ;;
        esac
        pathcheck uic
        if [ $? = 0 ]
        then
            QT_VERSION=`uic -version 2>&1 | sed 's/\([^0-9][^0-9]*\)\([0-9]\)\([^0-9].*\)/\2/'`
            if [ "$QT_VERSION" != "4" ]
            then
                echo "Off. Qt tools on the path are not version 4."
                return 0
            fi
            echo "On. Using QT tools from the path."
            set_var OSPL_QT_IS_ON yes
        else
            echo "Off. Ok, iShapes Demo will not be built"
        fi
    fi
    return 0
}

perl_check ()
{
    echo -n "Perl: "
    pathcheck perl
    if [ $? != 0 ]
    then
        echo "ERROR - Not found"
        return 1
    fi
    PERL_VER=`perl -V:version`
    echo "OK - using perl $PERL_VER"
    return 0
}

boost_check ()
{
    if [ -n "$BOOST_ROOT" ]
    then
        echo -n "Boost: "
        check_and_set_native_dir BOOST_ROOT
        if [ $? != 0 ]
        then
            return 1
        else
            convert_windows_path "$BOOST_ROOT"
            set_var BOOST_ROOT_UNIX $UNIX_CONV_PATH
        fi
    fi
}

# There are currently 56 individual config files in git that call make_check.
# There are (AFAIK) none that don't
global_checks ()
{
   ERRS=0
   perl_check || ERRS=1
   qt_check || ERRS=1
   boost_check || ERRS=1
   return $ERRS
}

# require GNU make 3.80 or 3.81
make_check ()
{
    echo -n "MAKE: "
    pathcheck make
    if [ $? != 0 ]
    then
        echo "ERROR - Not found"
        return 1
    fi

    MAKE_MAJOR=`make -v 2>/dev/null | head -1 | cut -f 1 -d . | cut -f 3 -d ' '`
    if [ $MAKE_MAJOR -lt 3 ]
    then
        echo "ERROR - Only make 3.80 and above is supported"
        return 1
    fi

    MAKE_MINOR=`make -v 2>/dev/null | head -1 | cut -f 2 -d .`
    if [ $MAKE_MAJOR -eq 3 -a $MAKE_MINOR -lt 80 ]
    then
        echo "ERROR - Only make 3.80 and above is supported"
        return 1
    fi

    echo "OK - using `make -v 2>/dev/null | head -1`"
    global_checks
    return $?
}

gsoap_check ()
{
    echo -n "GSOAP: "
    # Check GSOAPHOME directory first
    if [ -n "$GSOAPHOME" ]
    then
        if [ ! -d "$GSOAPHOME" ]
        then
            echo "Error - $GSOAPHOME is invalid"
            return 1
        fi
        if [ ! -f "$GSOAPHOME/bin/soapcpp2" ]
        then
            echo "Error - Invalid Setup"
            return 1
        fi
        PATH="$GSOAPHOME/bin:$PATH"
    else
        # If not check the path for soapcpp2
        pathcheck soapcpp2
        if [ $? != 0 ]
        then
            if [ -n "$OSPL_OUTER_HOME" ]
            then
                echo "Error - Not found"
                return 1
            else
                echo "Warning - Not found, cmsoap will not be built"
                unset_var INCLUDE_SERVICES_CMSOAP
                return 0
            fi
        fi
        SOAPCPP2_EXE="$PATHCHECK_FOUND"
        GSOAPHOME1=`dirname "$SOAPCPP2_EXE"`
        GSOAPHOME=`dirname "$GSOAPHOME1"`
    fi
    LD_LIBRARY_PATH="$GSOAPHOME/lib:$LD_LIBRARY_PATH"

    soapcpp2 -v 2> soapcpp2.ver
    GSOAP_VERSION=`cat soapcpp2.ver | grep "The gSOAP Stub and Skeleton Compiler" | awk '{ print $12 }'`
    rm -f soapcpp2.ver
    #if [ "$GSOAP_VERSION" != "2.7.8c" ]
    #then
    #    echo "Error - Only gsoap version 2.7.8c is supported"
    #    return 1
    #fi

    set_var PATH "$PATH"
    set_var LD_LIBRARY_PATH "$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH
    set_var GSOAPHOME "$GSOAPHOME"

    ESCAPED_GSOAPHOME=`echo "$GSOAPHOME" | sed 's/ /\\\\ /g'`
    export ESCAPED_GSOAPHOME
    set_var ESCAPED_GSOAPHOME "$ESCAPED_GSOAPHOME"

    echo "OK - using GSOAP version $GSOAP_VERSION"
    echo "  setting GSOAPHOME to $GSOAPHOME"
    return 0
}

# required Bison
bison_check ()
{
    echo -n "BISON: "
    pathcheck bison
    if [ $? != 0 ]
    then
        echo "ERROR - Not found"
        return 1
    fi
    BISON_VERSION=`bison -V 2>/dev/null | head -1`
    #BISON_MAJOR=`echo $BISON_VERSION | cut -f 1 -d '.' | cut -f 4 -d ' '`
    #if [ $BISON_MAJOR -lt 2 ]
    #then
    #    echo "ERROR - Only bison 2.x and above is supported"
    #    return 1
    #fi

    echo "OK - using $BISON_VERSION"
    return 0
}

# required Flex
flex_check ()
{
    echo -n "FLEX: "
    pathcheck flex
    if [ $? != 0 ]
    then
        echo "ERROR - Not found"
        return 1
    fi

    FLEX_VERSION=`flex -V | cut -f 2 -d ' '`
    # some flex versions say "flex version x" rather than "flex x"
    if [ "$FLEX_VERSION" = "version" ]
    then
        FLEX_VERSION=`flex -V | cut -f 3 -d ' '`
    fi
    #FLEX_MAJOR=`echo $FLEX_VERSION | cut -f 1 -d '.'`
    #if [ $FLEX_MAJOR -lt 2 ]
    #then
    #    echo "ERROR - Only flex 2.5.x and above is supported"
    #    return 1
    #fi
    #FLEX_MINOR=`echo $FLEX_VERSION | cut -f 2 -d '.'`
    #if [ $FLEX_MAJOR -eq 2 -a $FLEX_MINOR -lt 5 ]
    #then
    #    echo "ERROR - Only flex 2.5.x and above is supported"
    #    return 1
    #fi

    echo "OK - using $FLEX_VERSION"
    return 0
}

# require ar and ld
binutils_native_check ()
{
    echo -n "BINUTILS: "

    pathcheck ar
    if [ $? != 0 ]
    then
        echo "ERROR - ar Not found"
        return 1
    fi

    pathcheck ld
    if [ $? != 0 ]
    then
        echo "ERROR - ld Not found"
        return 1
    fi

    echo "OK"
    return 0
}

javac_check_darwin ()
{
    pathcheck $JAVAC_COMMAND
    if [ $? != 0 ]
    then
        no_javac
        return $?
    fi
    JAVA_HOME=`/usr/libexec/java_home`
    set_var JAVA_HOME "$JAVA_HOME"

    JAVAC_EXE=javac
    "$JAVAC_EXE" -version 2> javac.ver
    JAVAC_REAL_VERSION=`cat javac.ver | grep "javac" | head -1 | awk '{ print $2 }'`
    JAVAC_VERSION=`echo $JAVAC_REAL_VERSION | awk -F'.' '{ print $1"."$2 }' | sed -e 's;\.;0;g'`
    rm -f javac.ver
    if [ -z "$JAVAC_VERSION" -o "$JAVAC_VERSION" -lt "$REQUIRED_VERSION" ] ; then
        echo "ERROR - Only Oracle JAVA 1.6 and above is supported ($JAVAC_VERSION < $REQUIRED_VERSION)"
        return 1
    elif [ "$JAVAC_VERSION" -gt "$REQUIRED_VERSION" ] ; then
        echo "Warning - using compatibility mode for Java 1.6"
    fi
    echo "OK - using JAVAC version $JAVAC_REAL_VERSION"
    echo "  JAVA_HOME is $JAVA_HOME"
}

# require javac and check JAVA_HOME
javac_check ()
{
    echo -n "JAVAC: "
    REQUIRED_VERSION=1.6
    REQUIRED_VERSION=`echo $REQUIRED_VERSION | sed -e 's;\.;0;g'`

    if [ -z "$JAVAC_COMMAND" ] ; then
        JAVAC_COMMAND=javac
    fi

    # Darwin hack
    case $host in
        Darwin*)
            javac_check_darwin
            return
            ;;
    esac

    # Check JAVA_HOME directory first
    if [ -n "$JAVA_HOME" ]
    then
        convert_windows_path "$JAVA_HOME"
        if [ $? != 0 ]
        then
            return 1
        fi
        JAVAC_EXE="$UNIX_CONV_PATH/bin/$JAVAC_COMMAND"
        if [ ! -f "$JAVAC_EXE" ]
        then
            no_javac
            return $?
        fi
        PATH="$UNIX_CONV_PATH/bin:$PATH"
        set_var PATH "$PATH"
    else
        # If not check the path for java
        pathcheck $JAVAC_COMMAND
        if [ $? != 0 ]
        then
            no_javac
            return $?
        fi
        T_JAVAC_EXE="$PATHCHECK_FOUND"
        if [ "$?" != "0" ]
        then
            no_javac
            return $?
        fi
        pathcheck readlink
        if [ $? != 0 ]
        then
            no_javac
            return $?
        fi
        JAVAC_EXE=`readlink -f "$T_JAVAC_EXE"`
    fi

    "$JAVAC_EXE" -version 2> javac.ver
    JAVAC_REAL_VERSION=`cat javac.ver | grep "javac" | head -1 | awk '{ print $2 }'`
    JAVAC_VERSION=`echo $JAVAC_REAL_VERSION | awk -F'.' '{ print $1"."$2 }' | sed -e 's;\.;0;g'`
    rm -f javac.ver
    if [ -n "$JAVAC_VERSION" ]
    then
        if [ "$JAVAC_VERSION" -ge "$REQUIRED_VERSION" ]
        then
            JAVA_HOME=`echo "$JAVAC_EXE" | sed 's@/bin/javac$@@' `
            set_var JAVA_HOME "$JAVA_HOME"
            if [ "$JAVAC_VERSION" -ne "$REQUIRED_VERSION" -a ! -f "$JAVA_COMPATJAR" ]
            then
                if [ "$STRICT_CHECKS" = yes ]
                then
                    echo "ERROR - JAVA_COMPATJAR must point to rt.jar for Java 1.6"
                    return 1
                else
                    echo "Warning - you should set JAVA_COMPATJAR to rt.jar for Java 1.6"
                fi
            fi
        else
            echo "ERROR - Only Oracle JAVA 1.6 and above is supported"
            return 1
        fi
        if [ ! -n "$JAVA_VERSION_OVERRIDE" -a ! -z "$OSPL_OUTER_HOME"  -a "$JAVAC_VERSION" -ne "$REQUIRED_VERSION" ]
        then
            echo "ERROR - Only Oracle JAVA 1.6 is supported"
            return 1
        fi
    else
        echo "ERROR - Only Oracle JAVA 1.6 and above is supported"
        return 1
    fi

    LD_LIBRARY_PATH="$JAVA_HOME/lib:$LD_LIBRARY_PATH"

    T_LD_PATH=yes
    TYPE=`uname -m`
    case `uname` in
        Linux)
            if [ "$TYPE" = "x86_64" ]
            then
                JAVA_PATH_EXT=amd64
                LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/$JAVA_PATH_EXT/server"
            else
                JAVA_PATH_EXT=i386
            fi
            ;;
        SunOS)
            JAVA_PATH_EXT=sparc
            ;;
        AIX)
            JAVA_PATH_EXT=ppc
            ;;
        CYGWIN_NT*)
            JAVA_PATH_EXT=i386
            case ${SPLICE_HOST} in
                x86_64.*)
                    JAVA_PATH_EXT=amd64
                    ;;
            esac
            PATH="$UNIX_CONV_PATH/lib:$PATH"
            PATH="$PATH:$UNIX_CONV_PATH/jre/lib/$JAVA_PATH_EXT"
            PATH="$PATH:$UNIX_CONV_PATH/jre/lib/$JAVA_PATH_EXT/client"
            PATH="$PATH:$UNIX_CONV_PATH/jre/lib/$JAVA_PATH_EXT/native_threads"
            set_var PATH "$PATH"
            T_LD_PATH=no
            ;;
        *)
            echo "ERROR - Not yet supported Java setup"
            return 1
            ;;
    esac

    if [ "$T_LD_PATH" != "no" ]
    then
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/$JAVA_PATH_EXT"
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/$JAVA_PATH_EXT/client"
        LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$JAVA_HOME/jre/lib/$JAVA_PATH_EXT/native_threads"
        set_var LD_LIBRARY_PATH "$LD_LIBRARY_PATH"
        export LD_LIBRARY_PATH
    fi

    echo "OK - using JAVAC version $JAVAC_REAL_VERSION"
    echo "   JAVA_HOME is $JAVA_HOME"
    return 0
}

no_javac()
{
   if [ "$STRICT_CHECKS" = "yes" ]
   then
       echo "ERROR - Not found"
       return 1
   else
       echo "Warning - Java compiler environment not set, building of all Java related features is disabled."
       unset_var INCLUDE_JAVA
       return 0;
   fi
}

gmcs_check()
{
   if [ "$STRICT_CHECKS" = "yes" ]
   then
       if [ -n "$MONO_HOME" ]
       then
           gmcs_check_fn "ERROR"
           RES=$?
       else
           echo "GMCS: MONO_HOME not set, disabling SACS api build."
           . "$OSPL_HOME/setup/environment/exclude_sacs"
           RES=0
       fi
   else
       gmcs_check_fn "Warning"
       if [ $? != 0 ]
       then
           echo "   gmcs C# compiler not found, disabling SACS api build."
           . "$OSPL_HOME/setup/environment/exclude_sacs"
       fi
       RES=0
   fi
   return $RES
}

# require gmcs
gmcs_check_fn ()
{
    GMCS_REQUIRED_VERSION=2.4.0.0

    echo -n "GMCS: "
    pathcheck gmcs
    if [ $? != 0 ]
    then
        echo "$1 - No gmcs compiler found"
        return 1
    fi

    GMCS_VERSION_OUTPUT=`gmcs --version 2>&1 | grep "Mono"`
    if [ $? != 0 ]
    then
        echo "$1 - Cannot setup GMCS"
        gmcs --version
        return 1
    else
        GMCS_REAL_VERSION="`echo $GMCS_VERSION_OUTPUT | sed -n '/version/ s/.*version \([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/p'`"
        GMCS_REQUIRED_VER=`echo $GMCS_REQUIRED_VERSION | sed -e 's;\.;0;g'`
        GMCS_VERSION=`echo $GMCS_REAL_VERSION | sed -e 's;\.;0;g'`

        if [ -n "$GMCS_VERSION" ]
        then
            if ! [ "$GMCS_VERSION" -ge "$GMCS_REQUIRED_VER" ]
            then
                echo "ERROR - Only GMCS $GMCS_REQUIRED_VERSION and above is supported"
                return 1
            fi
        else
            echo "ERROR - Only GMCS $GMCS_REQUIRED_VERSION and above is supported"
            return 1
        fi

    fi

    echo "OK - using GMCS version $GMCS_REAL_VERSION"
    echo "  found in $PATHCHECK_FOUND"
    return 0
}

tao_check()
{
   if [ "$STRICT_CHECKS" = "yes" ]
   then
       tao_check_fn "ERROR"
       RES=$?
   else
       tao_check_fn "Warning"
       if [ $? != 0 ]
       then
           echo "   TAO environment not set, disabling TAO related features."
           . "$OSPL_HOME/setup/environment/exclude_tao"
       fi
       RES=0
   fi
   return $RES
}

# require TAO and check TAO_ROOT
tao_check_fn ()
{
    echo -n "TAO: "
    if [ -z "$TAO_ROOT" ]
    then
        pathcheck tao_idl
        if [ "$?" != "0" ]
        then
            echo "$1 - No TAO found"
            return 1
        fi
        TAOIDL_EXE="$PATHCHECK_FOUND"
        TAO_ROOT1=`dirname "$TAOIDL_EXE"`
        TAO_ROOT=`dirname "$TAO_ROOT1"`
        set_var TAO_ROOT "$TAO_ROOT"
    else
        if [ ! -d "$TAO_ROOT" ]
        then
            echo "$1 - $TAO_ROOT is not set to a directory"
            return 1
        fi
        set_var TAO_ROOT "$TAO_ROOT"
    fi

    if [ -z "$ACE_ROOT" ]
    then
       ACE_ROOT=$TAO_ROOT
       set_var ACE_ROOT "$ACE_ROOT"
    fi

    LD_LIBRARY_PATH="$ACE_ROOT/lib:$TAO_ROOT/lib:$LD_LIBRARY_PATH"
    set_var LD_LIBRARY_PATH "$LD_LIBRARY_PATH"
    export LD_LIBRARY_PATH

    PATH="$TAO_ROOT/bin:$ACE_ROOT/lib:$ACE_ROOT/bin:$PATH"
    set_var PATH "$PATH"

    TAO_VERSION=`tao_idl -V 2>&1 | grep "PrismTech Version"`
    if [ $? != 0 ]
    then
        #ACE TAO
        TAO_VERSION=`tao_idl -V 2>&1 | grep "TAO_IDL_BE, version "`
        if [ $? = 0 ]
        then
            T_VAR="`echo $TAO_VERSION | awk '{ print $2\" \"$3 }'`"
            SPLICE_ORB=DDS_ACE_TAO_5_6_6
        else
            echo "$1 - Cannot setup TAO"
            tao_idl -V
            return 1
        fi
    else
        T_VAR="`echo $TAO_VERSION | grep \"PrismTech Version No: TAO 1.4.1\"`"
        if [ $? = 0 ]
        then
            SPLICE_ORB=DDS_OpenFusion_1_4_1
        else
            T_VAR="`echo $TAO_VERSION | grep \"PrismTech Version No: TAO 1.5.1\"`"
            if [ $? = 0 ]
            then
                SPLICE_ORB=DDS_OpenFusion_1_5_1
            else
                T_VAR="`echo $TAO_VERSION | grep \"PrismTech Version No: TAO 1.6.1\"`"
                if [ $? = 0 ]
                then
                    SPLICE_ORB=DDS_OpenFusion_1_6_1
                else
                    T_VAR="`echo $TAO_VERSION | grep \"PrismTech Version No: TAO 2.\"`"
                    if [ $? = 0 ]
                    then
                        SPLICE_ORB=DDS_OpenFusion_2
                    else
                        echo "$1 - Unsupported version of PrismTech TAO"
                        tao_idl -V
                        return 1
                    fi
                fi
            fi
        fi
    fi

    set_var SPLICE_ORB $SPLICE_ORB
    echo "OK - SPLICE_ORB is TAO $TAO_VERSION"
    echo "  setting TAO_ROOT to $TAO_ROOT"
    TAO_ROOT_NORMALIZED=`"$OSPL_HOME/bin/ospl_normalizePath" "$TAO_ROOT"`
    set_var TAO_ROOT_NORMALIZED $TAO_ROOT_NORMALIZED
    return 0
}

# require gawk (no version checks)
gawk_check ()
{
    echo -n "GAWK: "
    pathcheck gawk
    if [ $? != 0 ]
    then
        echo "ERROR - Not found"
        return 1
    fi
    GAWK_VERSION=`gawk --version | head -1`
    echo "OK - using $GAWK_VERSION"
    return 0
}

jacorb_check()
{
   if [ "$STRICT_CHECKS" = "yes" ]
   then
       jacorb_check_fn "ERROR"
       RES=$?
   else
       jacorb_check_fn "Warning"
       if [ $? != 0 ]
       then
           echo "   JACORB environment not set, disabling JACORB related features."
           . "$OSPL_HOME/setup/environment/exclude_jacorb"
       fi
       RES=0
   fi
   return $RES
}

# jacorb_check - should have JACORB_HOME
jacorb_check_fn ()
{
    echo -n "JACORB: "

    if [ -z "$JACORB_HOME" ]
    then
        echo "$1 - JACORB_HOME not set"
        return 1
    fi

    if test ! -d "$JACORB_HOME"
    then
        echo "$1 - JACORB_HOME is not a directory"
        return 1
    fi

    if [ ! -f "$JACORB_HOME/lib/endorsed/jacorb.jar" ]
    then
        echo "$1 - $JACORB_HOME/lib/endorsed/jacorb.jar is not a file"
        return 1
    fi

    if [ ! -f "$JACORB_HOME/lib/endorsed/logkit.jar" ]
    then
        echo "$1 - $JACORB_HOME/lib/endorsed/logkit.jar is not a file"
        return 1
    fi

    if [ ! -f "$JACORB_HOME/lib/endorsed/avalon-framework.jar" ]
    then
        echo "$1 - $JACORB_HOME/lib/endorsed/avalon-framework.jar is not a file"
        return 1
    fi

    if [ ! -f "$JACORB_HOME/lib/idl.jar" ]
    then
        echo "$1 - $JACORB_HOME/lib/idl.jar is not a file"
        return 1
    fi

    echo "OK"
    echo "  JACORB_HOME is $JACORB_HOME"
    JACORB_HOME_NORMALIZED=`"$OSPL_HOME/bin/ospl_normalizePath" "$JACORB_HOME"`
    set_var JACORB_HOME_NORMALIZED "$JACORB_HOME_NORMALIZED"
    return 0
}

doxygen_check ()
{
    echo -n "Doxygen: "
    command -v doxygen >/dev/null 2>&1
    DOXYGEN_INSTALLED=$?
    if [ $DOXYGEN_INSTALLED -ne 0 ]
    then
        command -v git >/dev/null 2>&1
        GIT_INSTALLED=$?
        if [ $GIT_INSTALLED -ne 0 ]
        then
            if [ "$IS_SCOREBOARD_BUILD" = "yes" ]
            then
                echo "ERROR: no doxygen or git installed, no way to get generated docs."
                return 1
            else
                echo "Warning: no doxygen or git installed"
                echo "  Some generated docs will not be available"
                set_var OSPL_DOCS none
                return 0
            fi
        fi
        git ls-remote git://repository2.prismtech.com/ospl_docs &> /dev/null
        REPO_CHECK=$?
        if [ $REPO_CHECK -ne 0 ]
        then
            if [ "$IS_SCOREBOARD_BUILD" = "yes" ]
            then
                echo "ERROR: doc repo cannot be reached and doxygen not installed"
                return 1
            else
                echo "Warning: doc repo cannot be reached and doxygen not installed"
                echo "  Some generated docs will not be available"
                set_var OSPL_DOCS none
                return 0
            fi
        fi
        echo "OK: no doxygen installed, will attempt to retreive docs from git repo"
        return 0
    fi

    echo OK
    return 0
}

cleanup_checks ()
{
    unset msvs_check
    unset gcc_check
    unset make_check
    unset bison_check
    unset flex_check
    unset javac_check
    unset no_javac
    unset tao_check
    unset tao_check_fn
    unset gawk_check
    unset csharp_check
    unset jacorb_check
    unset valgrind_check
    unset gsoap_check
    unset doxygen_check
    unset PATHCHECK_FOUND
    unset GCC_FULLVERSION GCC_MAJOR GCC_MINOR BISON_VERSION FLEX_VERSION JAVAC_REAL_VERSION
    unset GMCS_VERSION GMCS_REAL_VERSION GMCS_VERSION_OUTPUT GMCS_REQUIRED_VERSION GMCS_REQUIRED_VER
    unset MAKE_MAJOR MAKE_MINOR BISON_MAJOR FLEX_MAJOR FLEX_MINOR
    unset REQUIRED_VERSION JAVAC_EXE JAVAC_VERSION MAIN_DRIVE
    unset T_JAVAC_EXE TAOIDL_EXE T_VAR SPATH TAO_ROOT1
    unset GAWK_VERSION JAVA_PATH_EXT CL_MAJOR COMPILER_VER CL_EXE
    unset VS_HOME_UNIX VS_HOME_DOS DOS_CONV_PATH UNIX_CONV_PATH T_LD_PATH
    unset CSC_EXE VERSIONS NET_VERSION TYPE PATH_ADDON SDK_PATH_ADDON
}
